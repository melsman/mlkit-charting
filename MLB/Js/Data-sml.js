if ((typeof(main$0Data$1)) == "undefined") {main$0Data$1 = {};
};
(function(){main$0Data$1.die$50 = function(s$53){throw [basis$0Initial$1.en$Fail$50,"Data: " + s$53];
};
var lookI$127 = function(obj$130,x$133){var v$140 = json$0json$1.objLook$94(obj$130,x$133);
switch (v$140[0]) { case 0: {var v$142 = v$140[1];
switch (v$142[0]) { case 3: {var v$185 = v$142[1];
var v$164 = basis$0String$1.fields$227(function(c$184){return c$184 == 46;
},v$185);
if (v$164 == null) {var s$602 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$602];
} else {var v$166 = v$164;
var v$167 = v$166[1];
if (v$167 == null) {var v$168 = v$166[0];
var v$564 = basis$0Int32$1.fromString$458(v$168);
switch (v$564[0]) { case 0: {return v$564[1];
 break; }default: {var s$565 = (("wrong type of value associated with " + x$133) + " - found number ") + v$168;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$565];
} };
} else {var v$169 = v$167;
if (v$169[1] == null) {var v$179 = v$166[0];
var v$180 = v$169[0];
var v$175 = basis$0Int32$1.fromString$458(v$180);
switch (v$175[0]) { case 0: {switch (v$175[1]) { case 0: {var v$577 = basis$0Int32$1.fromString$458(v$179);
switch (v$577[0]) { case 0: {return v$577[1];
 break; }default: {var s$578 = (("wrong type of value associated with " + x$133) + " - found number ") + v$179;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$578];
} };
 break; }default: {var s$584 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$584];
} };
 break; }default: {var s$591 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$591];
} };
} else {var s$598 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$598];
};
};
};
 break; }default: {var s$605 = ("value associated with " + x$133) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$605];
} };
 break; }default: {var s$609 = "no value associated with " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$609];
} };
};
var lookR$186 = function(obj$189,x$192){var v$199 = json$0json$1.objLook$94(obj$189,x$192);
switch (v$199[0]) { case 0: {var v$201 = v$199[1];
switch (v$201[0]) { case 3: {var v$210 = v$201[1];
var v$207 = basis$0Real$1.fromString$493(v$210);
switch (v$207[0]) { case 0: {return v$207[1];
 break; }default: {var s$612 = (("wrong type of value associated with " + x$192) + " - found number ") + v$210;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$612];
} };
 break; }default: {var s$617 = ("value associated with " + x$192) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$617];
} };
 break; }default: {var s$621 = "no value associated with " + x$192;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$621];
} };
};
main$0Data$1.fromJsonString$262 = function(s$265){return json$0json$1.foldlArrayJson$905(function(v$269){var v$270 = v$269[0];
var v$271 = v$269[1];
var t$1059;
var t$1052;
switch (v$270[0]) { case 2: {var v$653 = v$270[1];
var v$654;
var v$960 = json$0json$1.objLook$94(v$653,"cname");
switch (v$960[0]) { case 0: {var v$961 = v$960[1];
switch (v$961[0]) { case 0: {v$654 = v$961[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cname"];
} };
var v$655;
var v$966 = json$0json$1.objLook$94(v$653,"cversion");
switch (v$966[0]) { case 0: {var v$967 = v$966[1];
switch (v$967[0]) { case 0: {v$655 = v$967[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cversion is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cversion"];
} };
var v$656;
var s$659;
var v$972 = json$0json$1.objLook$94(v$653,"datetime");
switch (v$972[0]) { case 0: {var v$973 = v$972[1];
switch (v$973[0]) { case 0: {s$659 = v$973[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with datetime is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with datetime"];
} };
var v$660 = isodate$0isodate$1.fromString$456(basis$0String$1.extract$112(s$659,0,[0,10]));
switch (v$660[0]) { case 0: {v$656 = v$660[1];
 break; }default: {var s$661 = ("the string " + s$659) + " does not start with an iso-date";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$661];
} };
var v$665;
var v$978 = json$0json$1.objLook$94(v$653,"mach");
switch (v$978[0]) { case 0: {var v$979 = v$978[1];
switch (v$979[0]) { case 0: {v$665 = v$979[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with mach is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with mach"];
} };
var v$666;
var v$984 = json$0json$1.objLook$94(v$653,"pname");
switch (v$984[0]) { case 0: {var v$985 = v$984[1];
switch (v$985[0]) { case 0: {v$666 = v$985[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with pname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with pname"];
} };
var v$667 = lookI$127(v$653,"plen");
var v$668 = lookR$186(v$653,"ctime");
var v$669 = lookI$127(v$653,"binsz");
var v$670;
var v$671 = json$0json$1.objLook$94(v$653,"runs");
switch (v$671[0]) { case 0: {var v$672 = v$671[1];
switch (v$672[0]) { case 6: {var v$673 = v$672[1];
v$670 = (basis$0List$1.map$693(function(v$674){switch (v$674[0]) { case 2: {var v$675 = v$674[1];
var v$676 = lookI$127(v$675,"rss");
var v$677 = lookI$127(v$675,"size");
var v$678 = lookI$127(v$675,"data");
var v$679 = lookI$127(v$675,"stk");
var v$680 = lookI$127(v$675,"exe");
var v$681 = lookR$186(v$675,"sys");
var v$682 = lookR$186(v$675,"user");
return [v$678,v$680,lookR$186(v$675,"real"),v$676,v$677,v$679,v$681,v$682];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toRun expects an object"];
} };
},v$673));
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with 'runs' is not an array"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with 'runs'"];
} };
var t$1058 = v$669;
var t$1057 = v$654;
var t$1056 = v$668;
var t$1055 = v$655;
var t$1054 = v$656;
var t$1053;
var v$990 = json$0json$1.objLook$94(v$653,"err");
switch (v$990[0]) { case 0: {var v$991 = v$990[1];
switch (v$991[0]) { case 0: {t$1053 = v$991[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with err is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with err"];
} };
t$1052 = [t$1058,t$1057,t$1056,t$1055,t$1054,t$1053,v$665,v$667,v$666,v$670];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toLine expects an object"];
} };
t$1059 = [t$1052,v$271];
return t$1059;
},null,s$265);
};
main$0Data$1.getUrl$272 = function(url$275,f$278){var r$279 = SmlPrims.newRequest();
js$0Js$1.openn$632(r$279,[true,"GET",url$275]);
(function(r,f){r.onreadystatechange = f;})(r$279,function(v$285){switch ((function(r){return r.readyState;})(r$279)) { case 4: {var v$294 = (function(r){return SmlPrims.option(r.responseText);})(r$279);
switch (v$294[0]) { case 0: {var v$296 = v$294[1];
return f$278(v$296);
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"no response from " + url$275];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$650(r$279,[1]);
};
main$0Data$1.s$ml$300 = function(v$311,v$1047){switch (v$311[0]) { case 2: {var v$320 = v$311[1];
var v$317 = json$0json$1.objLook$94(v$320,v$1047);
switch (v$317[0]) { case 0: {return v$317[1];
 break; }default: {var s$696 = ("?> couldn't find '" + v$1047) + "' in object";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$696];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
};
main$0Data$1.s$dl$323 = function(v$335,v$336){var v$332;
switch (v$335[0]) { case 2: {var v$996 = v$335[1];
var v$998 = json$0json$1.objLook$94(v$996,v$336);
switch (v$998[0]) { case 0: {v$332 = v$998[1];
 break; }default: {var s$999 = ("?> couldn't find '" + v$336) + "' in object";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$999];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$332[0]) { case 0: {return v$332[1];
 break; }default: {var s$702 = ("$> expects string for '" + v$336) + "' in object";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$702];
} };
};
main$0Data$1.getReports$337 = function(f$340){return main$0Data$1.getUrl$272("https://api.github.com/repos/melsman/mlkit-bench/contents/reports",function(c$343){var l$344 = json$0json$1.foldlArrayJson$905(function(v$348){var v$349 = v$348[0];
var v$350 = v$348[1];
var t$1061;
var t$1060;
var v$709;
switch (v$349[0]) { case 2: {var v$1002 = v$349[1];
var v$1004 = json$0json$1.objLook$94(v$1002,"download_url");
switch (v$1004[0]) { case 0: {v$709 = v$1004[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'download_url' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$709[0]) { case 0: {t$1060 = v$709[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: $> expects string for 'download_url' in object"];
} };
t$1061 = [t$1060,v$350];
return t$1061;
},null,c$343);
return f$340(l$344);
});
};
main$0Data$1.processLink$351 = function(x$354,f$357){return main$0Data$1.getUrl$272(x$354,function(s$360){return f$357(main$0Data$1.fromJsonString$262(s$360));
});
};
main$0Data$1.processLinks$361 = function(links$364,f$367){var fix$1062 = {};
fix$1062.$loop = function(xs$371,f$374){lab$loop: while (true) {if (xs$371 == null) {return f$374(null);
} else {var v$387 = xs$371;
var v$388 = v$387[0];
var v$389 = v$387[1];
var t$1073 = v$389;
var t$1074 = (function(env$1067){return function(ds$383){var v$1063 = env$1067[0];
var v$1064 = env$1067[1];
var v$1065 = env$1067[2];
var v$1066 = env$1067[3];
return v$1066(v$1065,(function(env$1072){return function(s$716){var v$1068 = env$1072[0];
var v$1069 = env$1072[1];
var v$1070 = env$1072[2];
var v$1071 = env$1072[3];
var d$1006 = v$1071(s$716);
return v$1070([[v$1069,d$1006],v$1068]);
};
})([ds$383,v$1065,v$1063,v$1064]));
};
})([f$374,main$0Data$1.fromJsonString$262,v$388,main$0Data$1.getUrl$272]);
var xs$371 = t$1073;
var f$374 = t$1074;
continue lab$loop;
};
};
};
var loop$368 = fix$1062.$loop;
return loop$368(links$364,f$367);
};
main$0Data$1.cache_cc$390 = function(f$393){var xr$394 = [[1]];
return function(g$397){var v$402 = xr$394[0];
switch (v$402[0]) { case 0: {var v$404 = v$402[1];
return g$397(v$404);
 break; }default: {return f$393(function(x$407){(xr$394[0] = [0,x$407],0);
return g$397(x$407);
});
} };
};
};
main$0Data$1.getTagDate$410 = function(url$413,f$416){return main$0Data$1.getUrl$272(url$413,function(c$419){var j$420 = json$0json$1.fromString$849(c$419);
var d$436;
switch (j$420[0]) { case 2: {var v$465 = j$420[1];
var v$448 = json$0json$1.objLook$94(v$465,"author");
switch (v$448[0]) { case 0: {var v$450 = v$448[1];
switch (v$450[0]) { case 2: {var v$452 = v$450[1];
var v$741 = json$0json$1.objLook$94(v$452,"date");
switch (v$741[0]) { case 0: {var v$742 = v$741[1];
switch (v$742[0]) { case 0: {d$436 = v$742[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {var v$1008 = json$0json$1.objLook$94(v$465,"tagger");
switch (v$1008[0]) { case 0: {var v$1009 = v$1008[1];
switch (v$1009[0]) { case 2: {var v$1010 = v$1009[1];
var v$1011 = json$0json$1.objLook$94(v$1010,"date");
switch (v$1011[0]) { case 0: {var v$1012 = v$1011[1];
switch (v$1012[0]) { case 0: {d$436 = v$1012[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
} };
 break; }default: {var v$1014 = json$0json$1.objLook$94(v$465,"tagger");
switch (v$1014[0]) { case 0: {var v$1015 = v$1014[1];
switch (v$1015[0]) { case 2: {var v$1016 = v$1015[1];
var v$1017 = json$0json$1.objLook$94(v$1016,"date");
switch (v$1017[0]) { case 0: {var v$1018 = v$1017[1];
switch (v$1018[0]) { case 0: {d$436 = v$1018[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.expecting object"];
} };
return f$416(d$436);
});
};
main$0Data$1.getMLKitTags$466 = function(f$469){return main$0Data$1.getUrl$272("https://api.github.com/repos/melsman/mlkit/git/refs/tags",function(c$472){var l$473 = json$0json$1.foldlArrayJson$905(function(v$477){var v$509 = v$477[0];
var v$510 = v$477[1];
var reference$478;
var v$750;
switch (v$509[0]) { case 2: {var v$1021 = v$509[1];
var v$1023 = json$0json$1.objLook$94(v$1021,"ref");
switch (v$1023[0]) { case 0: {v$750 = v$1023[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'ref' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$750[0]) { case 0: {reference$478 = v$750[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: $> expects string for 'ref' in object"];
} };
var tag$479;
var v$489 = basis$0String$1.tokens$220(function(c$505){return c$505 == 47;
},reference$478);
if (v$489 == null) {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} else {var v$491 = v$489;
switch (v$491[0]) { case "refs": {var v$493 = v$491[1];
if (v$493 == null) {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} else {var v$495 = v$493;
switch (v$495[0]) { case "tags": {var v$497 = v$495[1];
if (v$497 == null) {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} else {var v$499 = v$497;
if (v$499[1] == null) {tag$479 = v$499[0];
} else {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
};
};
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} };
};
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} };
};
var url$506;
var v$948;
switch (v$509[0]) { case 2: {var v$1027 = v$509[1];
var v$1029 = json$0json$1.objLook$94(v$1027,"object");
switch (v$1029[0]) { case 0: {v$948 = v$1029[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'object' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
var v$778;
switch (v$948[0]) { case 2: {var v$1033 = v$948[1];
var v$1035 = json$0json$1.objLook$94(v$1033,"url");
switch (v$1035[0]) { case 0: {v$778 = v$1035[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'url' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$778[0]) { case 0: {url$506 = v$778[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: $> expects string for 'url' in object"];
} };
var t$1077;
var t$1076;
var t$1075;
var xr$784 = [[1]];
t$1075 = (function(g$785){var v$786 = xr$784[0];
switch (v$786[0]) { case 0: {var v$787 = v$786[1];
return g$785(v$787);
 break; }default: {return main$0Data$1.getTagDate$410(url$506,function(x$1051){(xr$784[0] = [0,x$1051],0);
return g$785(x$1051);
});
} };
});
t$1076 = [t$1075,tag$479];
t$1077 = [t$1076,v$510];
return t$1077;
},null,c$472);
return f$469(l$473);
});
};
return 0;
})();
