if ((typeof(main$0Data$1)) == "undefined") {main$0Data$1 = {};
};
(function(){main$0Data$1.die$50 = function(s$53){throw [basis$0Initial$1.en$Fail$50,"Data: " + s$53];
};
var lookT$102 = function(obj$105,x$108){var v$115 = json$0json$1.objLook$94(obj$105,x$108);
switch (v$115[0]) { case 0: {var v$117 = v$115[1];
switch (v$117[0]) { case 3: {var v$126 = v$117[1];
var v$123 = basis$0Time$1.fromString$289(v$126);
switch (v$123[0]) { case 0: {return v$123[1];
 break; }default: {var s$291 = (("wrong type of value associated with " + x$108) + " - found number ") + v$126;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$291];
} };
 break; }default: {var s$296 = ("value associated with " + x$108) + " is not a number";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$296];
} };
 break; }default: {var s$300 = "no value associated with " + x$108;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$300];
} };
};
var lookI$127 = function(obj$130,x$133){var v$140 = json$0json$1.objLook$94(obj$130,x$133);
switch (v$140[0]) { case 0: {var v$142 = v$140[1];
switch (v$142[0]) { case 3: {var v$185 = v$142[1];
var v$164 = basis$0String$1.fields$227(function(c$184){return c$184 == 46;
},v$185);
if (v$164 == null) {var s$350 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$350];
} else {var v$166 = v$164;
var v$167 = v$166[1];
if (v$167 == null) {var v$168 = v$166[0];
var v$312 = basis$0Int32$1.fromString$458(v$168);
switch (v$312[0]) { case 0: {return v$312[1];
 break; }default: {var s$313 = (("wrong type of value associated with " + x$133) + " - found number ") + v$168;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$313];
} };
} else {var v$169 = v$167;
if (v$169[1] == null) {var v$179 = v$166[0];
var v$180 = v$169[0];
var v$175 = basis$0Int32$1.fromString$458(v$180);
switch (v$175[0]) { case 0: {switch (v$175[1]) { case 0: {var v$325 = basis$0Int32$1.fromString$458(v$179);
switch (v$325[0]) { case 0: {return v$325[1];
 break; }default: {var s$326 = (("wrong type of value associated with " + x$133) + " - found number ") + v$179;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$326];
} };
 break; }default: {var s$332 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$332];
} };
 break; }default: {var s$339 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$339];
} };
} else {var s$346 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$346];
};
};
};
 break; }default: {var s$353 = ("value associated with " + x$133) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$353];
} };
 break; }default: {var s$357 = "no value associated with " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$357];
} };
};
main$0Data$1.fromJsonString$237 = function(s$240){return json$0json$1.foldlArrayJson$905(function(v$244){var v$245 = v$244[0];
var v$246 = v$244[1];
var t$567;
var t$560;
switch (v$245[0]) { case 2: {var v$389 = v$245[1];
var v$390;
var v$526 = json$0json$1.objLook$94(v$389,"cname");
switch (v$526[0]) { case 0: {var v$527 = v$526[1];
switch (v$527[0]) { case 0: {v$390 = v$527[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cname"];
} };
var v$391;
var v$532 = json$0json$1.objLook$94(v$389,"cversion");
switch (v$532[0]) { case 0: {var v$533 = v$532[1];
switch (v$533[0]) { case 0: {v$391 = v$533[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cversion is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cversion"];
} };
var v$392;
var s$395;
var v$538 = json$0json$1.objLook$94(v$389,"date");
switch (v$538[0]) { case 0: {var v$539 = v$538[1];
switch (v$539[0]) { case 0: {s$395 = v$539[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with date is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with date"];
} };
var v$396 = isodate$0isodate$1.fromString$456(basis$0String$1.extract$112(s$395,0,[0,10]));
switch (v$396[0]) { case 0: {v$392 = v$396[1];
 break; }default: {var s$397 = ("the string " + s$395) + " does not start with an iso-date";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$397];
} };
var v$401;
var v$544 = json$0json$1.objLook$94(v$389,"mach");
switch (v$544[0]) { case 0: {var v$545 = v$544[1];
switch (v$545[0]) { case 0: {v$401 = v$545[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with mach is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with mach"];
} };
var v$402;
var v$550 = json$0json$1.objLook$94(v$389,"pname");
switch (v$550[0]) { case 0: {var v$551 = v$550[1];
switch (v$551[0]) { case 0: {v$402 = v$551[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with pname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with pname"];
} };
var v$403 = lookI$127(v$389,"plen");
var v$404 = lookT$102(v$389,"ctime");
var v$405 = lookI$127(v$389,"binsz");
var v$406;
var v$407 = json$0json$1.objLook$94(v$389,"runs");
switch (v$407[0]) { case 0: {var v$408 = v$407[1];
switch (v$408[0]) { case 6: {var v$409 = v$408[1];
v$406 = (basis$0List$1.map$693(function(v$410){switch (v$410[0]) { case 2: {var v$411 = v$410[1];
var v$412 = lookI$127(v$411,"rss");
var v$413 = lookI$127(v$411,"size");
var v$414 = lookI$127(v$411,"data");
var v$415 = lookI$127(v$411,"stk");
var v$416 = lookI$127(v$411,"exe");
var v$417 = lookT$102(v$411,"sys");
var v$418 = lookT$102(v$411,"user");
return [v$414,v$416,lookT$102(v$411,"real"),v$412,v$413,v$415,v$417,v$418];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toRun expects an object"];
} };
},v$409));
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with 'runs' is not an array"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with 'runs'"];
} };
var t$566 = v$405;
var t$565 = v$390;
var t$564 = v$404;
var t$563 = v$391;
var t$562 = v$392;
var t$561;
var v$556 = json$0json$1.objLook$94(v$389,"err");
switch (v$556[0]) { case 0: {var v$557 = v$556[1];
switch (v$557[0]) { case 0: {t$561 = v$557[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with err is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with err"];
} };
t$560 = [t$566,t$565,t$564,t$563,t$562,t$561,v$401,v$403,v$402,v$406];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toLine expects an object"];
} };
t$567 = [t$560,v$246];
return t$567;
},null,s$240);
};
return 0;
})();
