if ((typeof(main$0Data$1)) == "undefined") {main$0Data$1 = {};
};
(function(){main$0Data$1.die$50 = function(s$53){throw [basis$0Initial$1.en$Fail$50,"Data: " + s$53];
};
var lookT$102 = function(obj$105,x$108){var v$115 = json$0json$1.objLook$94(obj$105,x$108);
switch (v$115[0]) { case 0: {var v$117 = v$115[1];
switch (v$117[0]) { case 3: {var v$126 = v$117[1];
var v$123 = basis$0Time$1.fromString$289(v$126);
switch (v$123[0]) { case 0: {return v$123[1];
 break; }default: {var s$350 = (("wrong type of value associated with " + x$108) + " - found number ") + v$126;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$350];
} };
 break; }default: {var s$355 = ("value associated with " + x$108) + " is not a number";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$355];
} };
 break; }default: {var s$359 = "no value associated with " + x$108;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$359];
} };
};
var lookI$127 = function(obj$130,x$133){var v$140 = json$0json$1.objLook$94(obj$130,x$133);
switch (v$140[0]) { case 0: {var v$142 = v$140[1];
switch (v$142[0]) { case 3: {var v$185 = v$142[1];
var v$164 = basis$0String$1.fields$227(function(c$184){return c$184 == 46;
},v$185);
if (v$164 == null) {var s$409 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$409];
} else {var v$166 = v$164;
var v$167 = v$166[1];
if (v$167 == null) {var v$168 = v$166[0];
var v$371 = basis$0Int32$1.fromString$458(v$168);
switch (v$371[0]) { case 0: {return v$371[1];
 break; }default: {var s$372 = (("wrong type of value associated with " + x$133) + " - found number ") + v$168;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$372];
} };
} else {var v$169 = v$167;
if (v$169[1] == null) {var v$179 = v$166[0];
var v$180 = v$169[0];
var v$175 = basis$0Int32$1.fromString$458(v$180);
switch (v$175[0]) { case 0: {switch (v$175[1]) { case 0: {var v$384 = basis$0Int32$1.fromString$458(v$179);
switch (v$384[0]) { case 0: {return v$384[1];
 break; }default: {var s$385 = (("wrong type of value associated with " + x$133) + " - found number ") + v$179;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$385];
} };
 break; }default: {var s$391 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$391];
} };
 break; }default: {var s$398 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$398];
} };
} else {var s$405 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$405];
};
};
};
 break; }default: {var s$412 = ("value associated with " + x$133) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$412];
} };
 break; }default: {var s$416 = "no value associated with " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$416];
} };
};
main$0Data$1.fromJsonString$237 = function(s$240){return json$0json$1.foldlArrayJson$905(function(v$244){var v$245 = v$244[0];
var v$246 = v$244[1];
var t$636;
var t$629;
switch (v$245[0]) { case 2: {var v$448 = v$245[1];
var v$449;
var v$595 = json$0json$1.objLook$94(v$448,"cname");
switch (v$595[0]) { case 0: {var v$596 = v$595[1];
switch (v$596[0]) { case 0: {v$449 = v$596[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cname"];
} };
var v$450;
var v$601 = json$0json$1.objLook$94(v$448,"cversion");
switch (v$601[0]) { case 0: {var v$602 = v$601[1];
switch (v$602[0]) { case 0: {v$450 = v$602[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cversion is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cversion"];
} };
var v$451;
var s$454;
var v$607 = json$0json$1.objLook$94(v$448,"date");
switch (v$607[0]) { case 0: {var v$608 = v$607[1];
switch (v$608[0]) { case 0: {s$454 = v$608[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with date is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with date"];
} };
var v$455 = isodate$0isodate$1.fromString$456(basis$0String$1.extract$112(s$454,0,[0,10]));
switch (v$455[0]) { case 0: {v$451 = v$455[1];
 break; }default: {var s$456 = ("the string " + s$454) + " does not start with an iso-date";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$456];
} };
var v$460;
var v$613 = json$0json$1.objLook$94(v$448,"mach");
switch (v$613[0]) { case 0: {var v$614 = v$613[1];
switch (v$614[0]) { case 0: {v$460 = v$614[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with mach is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with mach"];
} };
var v$461;
var v$619 = json$0json$1.objLook$94(v$448,"pname");
switch (v$619[0]) { case 0: {var v$620 = v$619[1];
switch (v$620[0]) { case 0: {v$461 = v$620[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with pname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with pname"];
} };
var v$462 = lookI$127(v$448,"plen");
var v$463 = lookT$102(v$448,"ctime");
var v$464 = lookI$127(v$448,"binsz");
var v$465;
var v$466 = json$0json$1.objLook$94(v$448,"runs");
switch (v$466[0]) { case 0: {var v$467 = v$466[1];
switch (v$467[0]) { case 6: {var v$468 = v$467[1];
v$465 = (basis$0List$1.map$693(function(v$469){switch (v$469[0]) { case 2: {var v$470 = v$469[1];
var v$471 = lookI$127(v$470,"rss");
var v$472 = lookI$127(v$470,"size");
var v$473 = lookI$127(v$470,"data");
var v$474 = lookI$127(v$470,"stk");
var v$475 = lookI$127(v$470,"exe");
var v$476 = lookT$102(v$470,"sys");
var v$477 = lookT$102(v$470,"user");
return [v$473,v$475,lookT$102(v$470,"real"),v$471,v$472,v$474,v$476,v$477];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toRun expects an object"];
} };
},v$468));
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with 'runs' is not an array"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with 'runs'"];
} };
var t$635 = v$464;
var t$634 = v$449;
var t$633 = v$463;
var t$632 = v$450;
var t$631 = v$451;
var t$630;
var v$625 = json$0json$1.objLook$94(v$448,"err");
switch (v$625[0]) { case 0: {var v$626 = v$625[1];
switch (v$626[0]) { case 0: {t$630 = v$626[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with err is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with err"];
} };
t$629 = [t$635,t$634,t$633,t$632,t$631,t$630,v$460,v$462,v$461,v$465];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toLine expects an object"];
} };
t$636 = [t$629,v$246];
return t$636;
},null,s$240);
};
main$0Data$1.getUrl$247 = function(url$250,f$253){var r$254 = SmlPrims.newRequest();
js$0Js$1.openn$632(r$254,[true,"GET",url$250]);
(function(r,f){r.onreadystatechange = f;})(r$254,function(v$260){switch ((function(r){return r.readyState;})(r$254)) { case 4: {var v$269 = (function(r){return SmlPrims.option(r.responseText);})(r$254);
switch (v$269[0]) { case 0: {var v$271 = v$269[1];
return f$253(v$271);
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"no response from " + url$250];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$650(r$254,[1]);
};
main$0Data$1.getReports$275 = function(f$278){return main$0Data$1.getUrl$247("https://api.github.com/repos/melsman/mlkit-bench/contents/reports",function(c$281){var l$282 = json$0json$1.foldlArrayJson$905(function(v$289){var v$290 = v$289[0];
switch (v$290[0]) { case 2: {var v$303 = v$290[1];
var v$304 = v$289[1];
var v$297 = json$0json$1.objLook$94(v$303,"download_url");
switch (v$297[0]) { case 0: {var v$299 = v$297[1];
switch (v$299[0]) { case 0: {return [v$299[1],v$304];
 break; }default: {return v$304;
} };
 break; }default: {return v$304;
} };
 break; }default: {return v$289[1];
} };
},null,c$281);
return f$278(l$282);
});
};
return 0;
})();
