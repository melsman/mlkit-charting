if ((typeof(main$0Data$1)) == "undefined") {main$0Data$1 = {};
};
(function(){main$0Data$1.die$54 = function(s$57){throw [basis$0Initial$1.en$Fail$54,"Data: " + s$57];
};
var lookI$131 = function(obj$134,x$137){var v$144 = json$0json$1.objLook$98(obj$134,x$137);
switch (v$144[0]) { case 0: {var v$146 = v$144[1];
switch (v$146[0]) { case 3: {var v$189 = v$146[1];
var v$168 = basis$0String$1.fields$231(function(c$188){return c$188 == 46;
},v$189);
if (v$168 == null) {var s$617 = "Wrong type of number value for " + x$137;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$617];
} else {var v$170 = v$168;
var v$171 = v$170[1];
if (v$171 == null) {var v$172 = v$170[0];
var v$579 = basis$0Int32$1.fromString$462(v$172);
switch (v$579[0]) { case 0: {return v$579[1];
 break; }default: {var s$580 = (("wrong type of value associated with " + x$137) + " - found number ") + v$172;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$580];
} };
} else {var v$173 = v$171;
if (v$173[1] == null) {var v$183 = v$170[0];
var v$184 = v$173[0];
var v$179 = basis$0Int32$1.fromString$462(v$184);
switch (v$179[0]) { case 0: {switch (v$179[1]) { case 0: {var v$592 = basis$0Int32$1.fromString$462(v$183);
switch (v$592[0]) { case 0: {return v$592[1];
 break; }default: {var s$593 = (("wrong type of value associated with " + x$137) + " - found number ") + v$183;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$593];
} };
 break; }default: {var s$599 = ((("Number " + v$189) + " associated with ") + x$137) + " is not an integer";
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$599];
} };
 break; }default: {var s$606 = ((("Number " + v$189) + " associated with ") + x$137) + " is not an integer";
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$606];
} };
} else {var s$613 = "Wrong type of number value for " + x$137;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$613];
};
};
};
 break; }default: {var s$620 = ("value associated with " + x$137) + " is not a string";
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$620];
} };
 break; }default: {var s$624 = "no value associated with " + x$137;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$624];
} };
};
main$0Data$1.fromJsonString$266 = function(s$269){return json$0json$1.foldlArrayJson$909(function(v$273){var v$274 = v$273[0];
var v$275 = v$273[1];
var t$1386;
var t$1376;
switch (v$274[0]) { case 2: {var v$734 = v$274[1];
var v$736;
var v$738 = json$0json$1.objLook$98(v$734,"cname");
switch (v$738[0]) { case 0: {var v$739 = v$738[1];
switch (v$739[0]) { case 0: {v$736 = v$739[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with cname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with cname"];
} };
var v$748;
var v$750 = json$0json$1.objLook$98(v$734,"cversion");
switch (v$750[0]) { case 0: {var v$751 = v$750[1];
switch (v$751[0]) { case 0: {v$748 = v$751[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with cversion is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with cversion"];
} };
var v$759;
var s$762;
var v$763 = json$0json$1.objLook$98(v$734,"datetime");
switch (v$763[0]) { case 0: {var v$764 = v$763[1];
switch (v$764[0]) { case 0: {s$762 = v$764[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with datetime is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with datetime"];
} };
var v$772 = isodate$0isodate$1.fromString$460(basis$0String$1.extract$116(s$762,0,[0,10]));
switch (v$772[0]) { case 0: {v$759 = v$772[1];
 break; }default: {var s$773 = ("the string " + s$762) + " does not start with an iso-date";
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$773];
} };
var v$778;
var v$780 = json$0json$1.objLook$98(v$734,"mach");
switch (v$780[0]) { case 0: {var v$781 = v$780[1];
switch (v$781[0]) { case 0: {v$778 = v$781[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with mach is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with mach"];
} };
var v$790;
var v$792 = json$0json$1.objLook$98(v$734,"pname");
switch (v$792[0]) { case 0: {var v$793 = v$792[1];
switch (v$793[0]) { case 0: {v$790 = v$793[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with pname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with pname"];
} };
var v$801 = lookI$131(v$734,"plen");
var v$802;
var v$1215 = json$0json$1.objLook$98(v$734,"ctime");
switch (v$1215[0]) { case 0: {var v$1216 = v$1215[1];
switch (v$1216[0]) { case 3: {var v$1217 = v$1216[1];
var v$1218 = basis$0Real$1.fromString$497(v$1217);
switch (v$1218[0]) { case 0: {v$802 = v$1218[1];
 break; }default: {var s$1219 = "wrong type of value associated with ctime - found number " + v$1217;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$1219];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with ctime is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with ctime"];
} };
var v$803 = lookI$131(v$734,"binsz");
var v$804;
var v$805 = json$0json$1.objLook$98(v$734,"runs");
switch (v$805[0]) { case 0: {var v$806 = v$805[1];
switch (v$806[0]) { case 6: {var v$807 = v$806[1];
v$804 = (basis$0List$1.map$697(function(v$808){switch (v$808[0]) { case 2: {var v$809 = v$808[1];
var v$810 = lookI$131(v$809,"rss");
var v$811 = lookI$131(v$809,"size");
var v$812 = lookI$131(v$809,"data");
var v$813 = lookI$131(v$809,"stk");
var v$814 = lookI$131(v$809,"exe");
var v$815;
var v$1224 = json$0json$1.objLook$98(v$809,"sys");
switch (v$1224[0]) { case 0: {var v$1225 = v$1224[1];
switch (v$1225[0]) { case 3: {var v$1226 = v$1225[1];
var v$1227 = basis$0Real$1.fromString$497(v$1226);
switch (v$1227[0]) { case 0: {v$815 = v$1227[1];
 break; }default: {var s$1228 = "wrong type of value associated with sys - found number " + v$1226;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$1228];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with sys is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with sys"];
} };
var v$816;
var v$1233 = json$0json$1.objLook$98(v$809,"user");
switch (v$1233[0]) { case 0: {var v$1234 = v$1233[1];
switch (v$1234[0]) { case 3: {var v$1235 = v$1234[1];
var v$1236 = basis$0Real$1.fromString$497(v$1235);
switch (v$1236[0]) { case 0: {v$816 = v$1236[1];
 break; }default: {var s$1237 = "wrong type of value associated with user - found number " + v$1235;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$1237];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with user is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with user"];
} };
var t$1379 = v$812;
var t$1378 = v$814;
var t$1377;
var v$1242 = json$0json$1.objLook$98(v$809,"real");
switch (v$1242[0]) { case 0: {var v$1243 = v$1242[1];
switch (v$1243[0]) { case 3: {var v$1244 = v$1243[1];
var v$1245 = basis$0Real$1.fromString$497(v$1244);
switch (v$1245[0]) { case 0: {t$1377 = v$1245[1];
 break; }default: {var s$1246 = "wrong type of value associated with real - found number " + v$1244;
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$1246];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with real is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with real"];
} };
return [t$1379,t$1378,t$1377,v$810,v$811,v$813,v$815,v$816];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: toRun expects an object"];
} };
},v$807));
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with 'runs' is not an array"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with 'runs'"];
} };
var t$1385 = v$803;
var t$1384 = v$736;
var t$1383 = v$802;
var t$1382 = v$748;
var t$1381 = v$759;
var t$1380;
var v$824 = json$0json$1.objLook$98(v$734,"err");
switch (v$824[0]) { case 0: {var v$825 = v$824[1];
switch (v$825[0]) { case 0: {t$1380 = v$825[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: value associated with err is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: no value associated with err"];
} };
t$1376 = [t$1385,t$1384,t$1383,t$1382,t$1381,t$1380,v$778,v$801,v$790,v$804];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: toLine expects an object"];
} };
t$1386 = [t$1376,v$275];
return t$1386;
},null,s$269);
};
main$0Data$1.getUrl$276 = function(url$279,f$282){var r$283 = SmlPrims.newRequest();
(function(r,m,u,a){return r.open(m,u,a);})(r$283,"GET",url$279,true);
(function(r,f){r.onreadystatechange = f;})(r$283,function(v$289){switch ((function(r){return r.readyState;})(r$283)) { case 4: {var v$298 = (function(r){return SmlPrims.option(r.responseText);})(r$283);
switch (v$298[0]) { case 0: {var v$300 = v$298[1];
return f$282(v$300);
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"no response from " + url$279];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$654(r$283,[1]);
};
main$0Data$1.s$ml$304 = function(v$315,v$1371){switch (v$315[0]) { case 2: {var v$324 = v$315[1];
var v$321 = json$0json$1.objLook$98(v$324,v$1371);
switch (v$321[0]) { case 0: {return v$321[1];
 break; }default: {var s$843 = ("?> couldn't find '" + v$1371) + "' in object";
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$843];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> expects left argument to be an object"];
} };
};
main$0Data$1.s$dl$327 = function(v$339,v$340){var v$336;
switch (v$339[0]) { case 2: {var v$851 = v$339[1];
var v$853 = json$0json$1.objLook$98(v$851,v$340);
switch (v$853[0]) { case 0: {v$336 = v$853[1];
 break; }default: {var s$854 = ("?> couldn't find '" + v$340) + "' in object";
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$854];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> expects left argument to be an object"];
} };
switch (v$336[0]) { case 0: {return v$336[1];
 break; }default: {var s$860 = ("$> expects string for '" + v$340) + "' in object";
throw [basis$0Initial$1.en$Fail$54,"Data: " + s$860];
} };
};
main$0Data$1.getReports$341 = function(f$344){var r$866 = SmlPrims.newRequest();
(function(r,m,u,a){return r.open(m,u,a);})(r$866,"GET","https://api.github.com/repos/melsman/mlkit-bench/contents/reports",true);
(function(r,f){r.onreadystatechange = f;})(r$866,function(v$871){switch ((function(r){return r.readyState;})(r$866)) { case 4: {var v$872 = (function(r){return SmlPrims.option(r.responseText);})(r$866);
switch (v$872[0]) { case 0: {var v$873 = v$872[1];
var l$1258 = json$0json$1.foldlArrayJson$909(function(v$1259){var v$1260 = v$1259[0];
var v$1261 = v$1259[1];
var t$1388;
var t$1387;
var v$1265;
switch (v$1260[0]) { case 2: {var v$1266 = v$1260[1];
var v$1267 = json$0json$1.objLook$98(v$1266,"download_url");
switch (v$1267[0]) { case 0: {v$1265 = v$1267[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> couldn't find 'download_url' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> expects left argument to be an object"];
} };
switch (v$1265[0]) { case 0: {t$1387 = v$1265[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: $> expects string for 'download_url' in object"];
} };
t$1388 = [t$1387,v$1261];
return t$1388;
},null,v$873);
return f$344(l$1258);
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"no response from https://api.github.com/repos/melsman/mlkit-bench/contents/reports"];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$654(r$866,[1]);
};
main$0Data$1.processLink$355 = function(x$358,f$361){var r$877 = SmlPrims.newRequest();
(function(r,m,u,a){return r.open(m,u,a);})(r$877,"GET",x$358,true);
(function(r,f){r.onreadystatechange = f;})(r$877,function(v$882){switch ((function(r){return r.readyState;})(r$877)) { case 4: {var v$883 = (function(r){return SmlPrims.option(r.responseText);})(r$877);
switch (v$883[0]) { case 0: {var v$884 = v$883[1];
return f$361(main$0Data$1.fromJsonString$266(v$884));
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"no response from " + x$358];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$654(r$877,[1]);
};
main$0Data$1.processLinks$365 = function(links$368,f$371){var fix$1389 = {};
fix$1389.$loop = function(xs$375,f$378){lab$loop: while (true) {if (xs$375 == null) {return f$378(null);
} else {var v$391 = xs$375;
var v$392 = v$391[0];
var v$393 = v$391[1];
var t$1401 = v$393;
var t$1402 = (function(env$1394){return function(ds$387){var v$1390 = env$1394[0];
var v$1391 = env$1394[1];
var v$1392 = env$1394[2];
var v$1393 = env$1394[3];
var r$1273 = SmlPrims.newRequest();
(function(r,m,u,a){return r.open(m,u,a);})(r$1273,"GET",v$1393,true);
(function(r,f){r.onreadystatechange = f;})(r$1273,(function(env$1400){return function(v$1274){var v$1395 = env$1400[0];
var v$1396 = env$1400[1];
var v$1397 = env$1400[2];
var v$1398 = env$1400[3];
var v$1399 = env$1400[4];
switch ((function(r){return r.readyState;})(v$1399)) { case 4: {var v$1275 = (function(r){return SmlPrims.option(r.responseText);})(v$1399);
switch (v$1275[0]) { case 0: {var v$1276 = v$1275[1];
var d$1370 = v$1398(v$1276);
return v$1397([[v$1396,d$1370],v$1395]);
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"no response from " + v$1396];
} };
 break; }default: {return 0;
} };
};
})([ds$387,v$1393,v$1391,v$1392,r$1273]));
return v$1390(r$1273,[1]);
};
})([js$0Js$1.send$654,f$378,main$0Data$1.fromJsonString$266,v$392]);
var xs$375 = t$1401;
var f$378 = t$1402;
continue lab$loop;
};
};
};
var loop$372 = fix$1389.$loop;
return loop$372(links$368,f$371);
};
main$0Data$1.cache_cc$394 = function(f$397){var xr$398 = [[1]];
return function(g$401){var v$406 = xr$398[0];
switch (v$406[0]) { case 0: {var v$408 = v$406[1];
return g$401(v$408);
 break; }default: {return f$397(function(x$411){(xr$398[0] = [0,x$411],0);
return g$401(x$411);
});
} };
};
};
main$0Data$1.getTagDate$414 = function(url$417,f$420){var r$890 = SmlPrims.newRequest();
(function(r,m,u,a){return r.open(m,u,a);})(r$890,"GET",url$417,true);
(function(r,f){r.onreadystatechange = f;})(r$890,function(v$895){switch ((function(r){return r.readyState;})(r$890)) { case 4: {var v$896 = (function(r){return SmlPrims.option(r.responseText);})(r$890);
switch (v$896[0]) { case 0: {var v$897 = v$896[1];
var j$1291 = json$0json$1.fromString$853(v$897);
var d$1292;
switch (j$1291[0]) { case 2: {var v$1293 = j$1291[1];
var v$1294 = json$0json$1.objLook$98(v$1293,"author");
switch (v$1294[0]) { case 0: {var v$1295 = v$1294[1];
switch (v$1295[0]) { case 2: {var v$1296 = v$1295[1];
var v$1297 = json$0json$1.objLook$98(v$1296,"date");
switch (v$1297[0]) { case 0: {var v$1298 = v$1297[1];
switch (v$1298[0]) { case 0: {d$1292 = v$1298[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no date object"];
} };
 break; }default: {var v$1299 = json$0json$1.objLook$98(v$1293,"tagger");
switch (v$1299[0]) { case 0: {var v$1300 = v$1299[1];
switch (v$1300[0]) { case 2: {var v$1301 = v$1300[1];
var v$1302 = json$0json$1.objLook$98(v$1301,"date");
switch (v$1302[0]) { case 0: {var v$1303 = v$1302[1];
switch (v$1303[0]) { case 0: {d$1292 = v$1303[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no tagger or author object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no tagger or author object"];
} };
} };
 break; }default: {var v$1304 = json$0json$1.objLook$98(v$1293,"tagger");
switch (v$1304[0]) { case 0: {var v$1305 = v$1304[1];
switch (v$1305[0]) { case 2: {var v$1306 = v$1305[1];
var v$1307 = json$0json$1.objLook$98(v$1306,"date");
switch (v$1307[0]) { case 0: {var v$1308 = v$1307[1];
switch (v$1308[0]) { case 0: {d$1292 = v$1308[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no tagger or author object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.no tagger or author object"];
} };
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getTagDate.expecting object"];
} };
return f$420(d$1292);
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"no response from " + url$417];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$654(r$890,[1]);
};
main$0Data$1.getMLKitTags$470 = function(f$473){var r$929 = SmlPrims.newRequest();
(function(r,m,u,a){return r.open(m,u,a);})(r$929,"GET","https://api.github.com/repos/melsman/mlkit/git/refs/tags",true);
(function(r,f){r.onreadystatechange = f;})(r$929,function(v$934){switch ((function(r){return r.readyState;})(r$929)) { case 4: {var v$935 = (function(r){return SmlPrims.option(r.responseText);})(r$929);
switch (v$935[0]) { case 0: {var v$936 = v$935[1];
var l$1326 = json$0json$1.foldlArrayJson$909(function(v$1327){var v$1328 = v$1327[0];
var v$1329 = v$1327[1];
var reference$1330;
var v$1334;
switch (v$1328[0]) { case 2: {var v$1335 = v$1328[1];
var v$1336 = json$0json$1.objLook$98(v$1335,"ref");
switch (v$1336[0]) { case 0: {v$1334 = v$1336[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> couldn't find 'ref' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> expects left argument to be an object"];
} };
switch (v$1334[0]) { case 0: {reference$1330 = v$1334[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: $> expects string for 'ref' in object"];
} };
var tag$1339;
var v$1340 = basis$0String$1.tokens$224(function(c$1341){return c$1341 == 47;
},reference$1330);
if (v$1340 == null) {throw [basis$0Initial$1.en$Fail$54,"Data: getMLKitTags.wrong format in ref"];
} else {var v$1342 = v$1340;
switch (v$1342[0]) { case "refs": {var v$1343 = v$1342[1];
if (v$1343 == null) {throw [basis$0Initial$1.en$Fail$54,"Data: getMLKitTags.wrong format in ref"];
} else {var v$1344 = v$1343;
switch (v$1344[0]) { case "tags": {var v$1345 = v$1344[1];
if (v$1345 == null) {throw [basis$0Initial$1.en$Fail$54,"Data: getMLKitTags.wrong format in ref"];
} else {var v$1346 = v$1345;
if (v$1346[1] == null) {tag$1339 = v$1346[0];
} else {throw [basis$0Initial$1.en$Fail$54,"Data: getMLKitTags.wrong format in ref"];
};
};
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getMLKitTags.wrong format in ref"];
} };
};
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: getMLKitTags.wrong format in ref"];
} };
};
var url$1347;
var v$1368;
switch (v$1328[0]) { case 2: {var v$1349 = v$1328[1];
var v$1350 = json$0json$1.objLook$98(v$1349,"object");
switch (v$1350[0]) { case 0: {v$1368 = v$1350[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> couldn't find 'object' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> expects left argument to be an object"];
} };
var v$1353;
switch (v$1368[0]) { case 2: {var v$1354 = v$1368[1];
var v$1355 = json$0json$1.objLook$98(v$1354,"url");
switch (v$1355[0]) { case 0: {v$1353 = v$1355[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> couldn't find 'url' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: ?> expects left argument to be an object"];
} };
switch (v$1353[0]) { case 0: {url$1347 = v$1353[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"Data: $> expects string for 'url' in object"];
} };
var t$1405;
var t$1404;
var t$1403;
var xr$1359 = [[1]];
t$1403 = (function(g$1360){var v$1361 = xr$1359[0];
switch (v$1361[0]) { case 0: {var v$1362 = v$1361[1];
return g$1360(v$1362);
 break; }default: {return main$0Data$1.getTagDate$414(url$1347,function(x$1375){(xr$1359[0] = [0,x$1375],0);
return g$1360(x$1375);
});
} };
});
t$1404 = [t$1403,tag$1339];
t$1405 = [t$1404,v$1329];
return t$1405;
},null,v$936);
return f$473(l$1326);
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"no response from https://api.github.com/repos/melsman/mlkit/git/refs/tags"];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$654(r$929,[1]);
};
return 0;
})();
