if ((typeof(utest$0utest$1)) == "undefined") {utest$0utest$1 = {};
};
(function(){var wrongCount$50 = [0];
var okCount$51 = [0];
var exnCount$52 = [0];
utest$0utest$1.check$71 = function(b$74){var s$207 = b$74?"OK":"WRONG";
var r$208;
switch (s$207) { case "OK": {r$208 = okCount$51;
 break; }case "WRONG": {r$208 = wrongCount$50;
 break; }case "EXN": {r$208 = exnCount$52;
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Utest.impossible"];
} };
(r$208[0] = (SmlPrims.chk_ovf_i32(r$208[0] + 1)),0);
return s$207;
};
utest$0utest$1.check$$79 = function(f$82){var s$210;
try {s$210 = ((f$82(0))?"OK":"WRONG");
} catch(v$418) {s$210 = ((function(v$88){return "EXN";
})(v$418));
};
var r$211;
switch (s$210) { case "OK": {r$211 = okCount$51;
 break; }case "WRONG": {r$211 = wrongCount$50;
 break; }case "EXN": {r$211 = exnCount$52;
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Utest.impossible"];
} };
(r$211[0] = (SmlPrims.chk_ovf_i32(r$211[0] + 1)),0);
return s$210;
};
var fix$419 = {};
fix$419.$range = function(v$105,v$106){return function(p$96){return (v$105 > v$106)?true:((p$96(v$105))?((fix$419.$range(SmlPrims.chk_ovf_i32(v$105 + 1),v$106))(p$96)):false);
};
};
utest$0utest$1.range$89 = fix$419.$range;
utest$0utest$1.checkrange$107 = function(bounds$110){var v$310 = utest$0utest$1.range$89(bounds$110[0],bounds$110[1]);
return function(x$218){var b$404 = v$310(x$218);
var s$405 = b$404?"OK":"WRONG";
var r$406;
switch (s$405) { case "OK": {r$406 = okCount$51;
 break; }case "WRONG": {r$406 = wrongCount$50;
 break; }case "EXN": {r$406 = exnCount$52;
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Utest.impossible"];
} };
(r$406[0] = (SmlPrims.chk_ovf_i32(r$406[0] + 1)),0);
return s$405;
};
};
utest$0utest$1.tst0$111 = function(s$114,s$$117){return basis$0General$1.print$161(((s$114 + "    ") + s$$117) + "\n");
};
utest$0utest$1.tst$118 = function(s$121,b$124){var s$$227;
var s$232 = b$124?"OK":"WRONG";
var r$233;
switch (s$232) { case "OK": {r$233 = okCount$51;
 break; }case "WRONG": {r$233 = wrongCount$50;
 break; }case "EXN": {r$233 = exnCount$52;
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Utest.impossible"];
} };
(r$233[0] = (SmlPrims.chk_ovf_i32(r$233[0] + 1)),0);
s$$227 = s$232;
return basis$0General$1.print$161(((s$121 + "    ") + s$$227) + "\n");
};
utest$0utest$1.tst$$125 = function(s$128,f$131){var s$$236;
var s$241;
try {s$241 = ((f$131(0))?"OK":"WRONG");
} catch(v$420) {s$241 = ((function(v$242){return "EXN";
})(v$420));
};
var r$243;
switch (s$241) { case "OK": {r$243 = okCount$51;
 break; }case "WRONG": {r$243 = wrongCount$50;
 break; }case "EXN": {r$243 = exnCount$52;
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Utest.impossible"];
} };
(r$243[0] = (SmlPrims.chk_ovf_i32(r$243[0] + 1)),0);
s$$236 = s$241;
return basis$0General$1.print$161(((s$128 + "    ") + s$$236) + "\n");
};
utest$0utest$1.tstrange$132 = function(s$135,bounds$138){var v$336 = utest$0utest$1.range$89(bounds$138[0],bounds$138[1]);
return function(x$248){var b$414 = v$336(x$248);
var s$$415;
var s$416 = b$414?"OK":"WRONG";
var r$417;
switch (s$416) { case "OK": {r$417 = okCount$51;
 break; }case "WRONG": {r$417 = wrongCount$50;
 break; }case "EXN": {r$417 = exnCount$52;
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Utest.impossible"];
} };
(r$417[0] = (SmlPrims.chk_ovf_i32(r$417[0] + 1)),0);
s$$415 = s$416;
return basis$0General$1.print$161(((s$135 + "    ") + s$$415) + "\n");
};
};
var module$143 = ["unknown module"];
utest$0utest$1.tstStart$144 = function(s$147){basis$0General$1.print$161(("Testing " + (("'" + s$147) + "'")) + "...\n");
(wrongCount$50[0] = 0,0);
(okCount$51[0] = 0,0);
(exnCount$52[0] = 0,0);
return (module$143[0] = s$147,0);
};
utest$0utest$1.tstEnd$166 = function(v$168){if ((wrongCount$50[0] == 0)?(exnCount$52[0] == 0):false) {return basis$0General$1.print$161((("Succesfully tested " + (("'" + module$143[0]) + "'")) + ":\n") + ((((" OK: " + (basis$0Int32$1.toString$454(okCount$51[0]))) + "\n") + ((" WRONG: " + (basis$0Int32$1.toString$454(wrongCount$50[0]))) + "\n")) + ((" EXN: " + (basis$0Int32$1.toString$454(exnCount$52[0]))) + "\n")));
} else {return basis$0General$1.print$161((("Failed test of " + (("'" + module$143[0]) + "'")) + ":\n") + ((((" OK: " + (basis$0Int32$1.toString$454(okCount$51[0]))) + "\n") + ((" WRONG: " + (basis$0Int32$1.toString$454(wrongCount$50[0]))) + "\n")) + ((" EXN: " + (basis$0Int32$1.toString$454(exnCount$52[0]))) + "\n")));
};
};
return 0;
})();
