if ((typeof(main$0Data$1)) == "undefined") {main$0Data$1 = {};
};
(function(){main$0Data$1.die$50 = function(s$53){throw [basis$0Initial$1.en$Fail$50,"Data: " + s$53];
};
var lookI$127 = function(obj$130,x$133){var v$140 = json$0json$1.objLook$94(obj$130,x$133);
switch (v$140[0]) { case 0: {var v$142 = v$140[1];
switch (v$142[0]) { case 3: {var v$185 = v$142[1];
var v$164 = basis$0String$1.fields$227(function(c$184){return c$184 == 46;
},v$185);
if (v$164 == null) {var s$461 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$461];
} else {var v$166 = v$164;
var v$167 = v$166[1];
if (v$167 == null) {var v$168 = v$166[0];
var v$423 = basis$0Int32$1.fromString$458(v$168);
switch (v$423[0]) { case 0: {return v$423[1];
 break; }default: {var s$424 = (("wrong type of value associated with " + x$133) + " - found number ") + v$168;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$424];
} };
} else {var v$169 = v$167;
if (v$169[1] == null) {var v$179 = v$166[0];
var v$180 = v$169[0];
var v$175 = basis$0Int32$1.fromString$458(v$180);
switch (v$175[0]) { case 0: {switch (v$175[1]) { case 0: {var v$436 = basis$0Int32$1.fromString$458(v$179);
switch (v$436[0]) { case 0: {return v$436[1];
 break; }default: {var s$437 = (("wrong type of value associated with " + x$133) + " - found number ") + v$179;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$437];
} };
 break; }default: {var s$443 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$443];
} };
 break; }default: {var s$450 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$450];
} };
} else {var s$457 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$457];
};
};
};
 break; }default: {var s$464 = ("value associated with " + x$133) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$464];
} };
 break; }default: {var s$468 = "no value associated with " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$468];
} };
};
var lookR$186 = function(obj$189,x$192){var v$199 = json$0json$1.objLook$94(obj$189,x$192);
switch (v$199[0]) { case 0: {var v$201 = v$199[1];
switch (v$201[0]) { case 3: {var v$210 = v$201[1];
var v$207 = basis$0Real$1.fromString$493(v$210);
switch (v$207[0]) { case 0: {return v$207[1];
 break; }default: {var s$471 = (("wrong type of value associated with " + x$192) + " - found number ") + v$210;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$471];
} };
 break; }default: {var s$476 = ("value associated with " + x$192) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$476];
} };
 break; }default: {var s$480 = "no value associated with " + x$192;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$480];
} };
};
main$0Data$1.fromJsonString$262 = function(s$265){return json$0json$1.foldlArrayJson$905(function(v$269){var v$270 = v$269[0];
var v$271 = v$269[1];
var t$704;
var t$697;
switch (v$270[0]) { case 2: {var v$512 = v$270[1];
var v$513;
var v$662 = json$0json$1.objLook$94(v$512,"cname");
switch (v$662[0]) { case 0: {var v$663 = v$662[1];
switch (v$663[0]) { case 0: {v$513 = v$663[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cname"];
} };
var v$514;
var v$668 = json$0json$1.objLook$94(v$512,"cversion");
switch (v$668[0]) { case 0: {var v$669 = v$668[1];
switch (v$669[0]) { case 0: {v$514 = v$669[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cversion is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cversion"];
} };
var v$515;
var s$518;
var v$674 = json$0json$1.objLook$94(v$512,"datetime");
switch (v$674[0]) { case 0: {var v$675 = v$674[1];
switch (v$675[0]) { case 0: {s$518 = v$675[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with datetime is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with datetime"];
} };
var v$519 = isodate$0isodate$1.fromString$456(basis$0String$1.extract$112(s$518,0,[0,10]));
switch (v$519[0]) { case 0: {v$515 = v$519[1];
 break; }default: {var s$520 = ("the string " + s$518) + " does not start with an iso-date";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$520];
} };
var v$524;
var v$680 = json$0json$1.objLook$94(v$512,"mach");
switch (v$680[0]) { case 0: {var v$681 = v$680[1];
switch (v$681[0]) { case 0: {v$524 = v$681[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with mach is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with mach"];
} };
var v$525;
var v$686 = json$0json$1.objLook$94(v$512,"pname");
switch (v$686[0]) { case 0: {var v$687 = v$686[1];
switch (v$687[0]) { case 0: {v$525 = v$687[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with pname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with pname"];
} };
var v$526 = lookI$127(v$512,"plen");
var v$527 = lookR$186(v$512,"ctime");
var v$528 = lookI$127(v$512,"binsz");
var v$529;
var v$530 = json$0json$1.objLook$94(v$512,"runs");
switch (v$530[0]) { case 0: {var v$531 = v$530[1];
switch (v$531[0]) { case 6: {var v$532 = v$531[1];
v$529 = (basis$0List$1.map$693(function(v$533){switch (v$533[0]) { case 2: {var v$534 = v$533[1];
var v$535 = lookI$127(v$534,"rss");
var v$536 = lookI$127(v$534,"size");
var v$537 = lookI$127(v$534,"data");
var v$538 = lookI$127(v$534,"stk");
var v$539 = lookI$127(v$534,"exe");
var v$540 = lookR$186(v$534,"sys");
var v$541 = lookR$186(v$534,"user");
return [v$537,v$539,lookR$186(v$534,"real"),v$535,v$536,v$538,v$540,v$541];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toRun expects an object"];
} };
},v$532));
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with 'runs' is not an array"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with 'runs'"];
} };
var t$703 = v$528;
var t$702 = v$513;
var t$701 = v$527;
var t$700 = v$514;
var t$699 = v$515;
var t$698;
var v$692 = json$0json$1.objLook$94(v$512,"err");
switch (v$692[0]) { case 0: {var v$693 = v$692[1];
switch (v$693[0]) { case 0: {t$698 = v$693[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with err is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with err"];
} };
t$697 = [t$703,t$702,t$701,t$700,t$699,t$698,v$524,v$526,v$525,v$529];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toLine expects an object"];
} };
t$704 = [t$697,v$271];
return t$704;
},null,s$265);
};
main$0Data$1.getUrl$272 = function(url$275,f$278){var r$279 = SmlPrims.newRequest();
js$0Js$1.openn$632(r$279,[true,"GET",url$275]);
(function(r,f){r.onreadystatechange = f;})(r$279,function(v$285){switch ((function(r){return r.readyState;})(r$279)) { case 4: {var v$294 = (function(r){return SmlPrims.option(r.responseText);})(r$279);
switch (v$294[0]) { case 0: {var v$296 = v$294[1];
return f$278(v$296);
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"no response from " + url$275];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$650(r$279,[1]);
};
main$0Data$1.getReports$300 = function(f$303){return main$0Data$1.getUrl$272("https://api.github.com/repos/melsman/mlkit-bench/contents/reports",function(c$306){var l$307 = json$0json$1.foldlArrayJson$905(function(v$314){var v$315 = v$314[0];
switch (v$315[0]) { case 2: {var v$328 = v$315[1];
var v$329 = v$314[1];
var v$322 = json$0json$1.objLook$94(v$328,"download_url");
switch (v$322[0]) { case 0: {var v$324 = v$322[1];
switch (v$324[0]) { case 0: {return [v$324[1],v$329];
 break; }default: {return v$329;
} };
 break; }default: {return v$329;
} };
 break; }default: {return v$314[1];
} };
},null,c$306);
return f$303(l$307);
});
};
main$0Data$1.processLink$331 = function(x$334,f$337){return main$0Data$1.getUrl$272(x$334,function(s$340){return f$337(main$0Data$1.fromJsonString$262(s$340));
});
};
main$0Data$1.processLinks$341 = function(links$344,f$347){var fix$705 = {};
fix$705.$loop = function(xs$351,f$354){lab$loop: while (true) {if (xs$351 == null) {return f$354(null);
} else {var v$367 = xs$351;
var v$368 = v$367[0];
var v$369 = v$367[1];
var t$716 = v$369;
var t$717 = (function(env$710){return function(ds$363){var v$706 = env$710[0];
var v$707 = env$710[1];
var v$708 = env$710[2];
var v$709 = env$710[3];
return v$709(v$708,(function(env$715){return function(s$559){var v$711 = env$715[0];
var v$712 = env$715[1];
var v$713 = env$715[2];
var v$714 = env$715[3];
var d$696 = v$714(s$559);
return v$713([[v$712,d$696],v$711]);
};
})([ds$363,v$708,v$706,v$707]));
};
})([f$354,main$0Data$1.fromJsonString$262,v$368,main$0Data$1.getUrl$272]);
var xs$351 = t$716;
var f$354 = t$717;
continue lab$loop;
};
};
};
var loop$348 = fix$705.$loop;
return loop$348(links$344,f$347);
};
return 0;
})();
