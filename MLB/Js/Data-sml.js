if ((typeof(main$0Data$1)) == "undefined") {main$0Data$1 = {};
};
(function(){main$0Data$1.die$50 = function(s$53){throw [basis$0Initial$1.en$Fail$50,"Data: " + s$53];
};
var lookT$102 = function(obj$105,x$108){var v$115 = json$0json$1.objLook$94(obj$105,x$108);
switch (v$115[0]) { case 0: {var v$117 = v$115[1];
switch (v$117[0]) { case 3: {var v$126 = v$117[1];
var v$123 = basis$0Time$1.fromString$289(v$126);
switch (v$123[0]) { case 0: {return v$123[1];
 break; }default: {var s$337 = (("wrong type of value associated with " + x$108) + " - found number ") + v$126;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$337];
} };
 break; }default: {var s$342 = ("value associated with " + x$108) + " is not a number";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$342];
} };
 break; }default: {var s$346 = "no value associated with " + x$108;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$346];
} };
};
var lookI$127 = function(obj$130,x$133){var v$140 = json$0json$1.objLook$94(obj$130,x$133);
switch (v$140[0]) { case 0: {var v$142 = v$140[1];
switch (v$142[0]) { case 3: {var v$185 = v$142[1];
var v$164 = basis$0String$1.fields$227(function(c$184){return c$184 == 46;
},v$185);
if (v$164 == null) {var s$396 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$396];
} else {var v$166 = v$164;
var v$167 = v$166[1];
if (v$167 == null) {var v$168 = v$166[0];
var v$358 = basis$0Int32$1.fromString$458(v$168);
switch (v$358[0]) { case 0: {return v$358[1];
 break; }default: {var s$359 = (("wrong type of value associated with " + x$133) + " - found number ") + v$168;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$359];
} };
} else {var v$169 = v$167;
if (v$169[1] == null) {var v$179 = v$166[0];
var v$180 = v$169[0];
var v$175 = basis$0Int32$1.fromString$458(v$180);
switch (v$175[0]) { case 0: {switch (v$175[1]) { case 0: {var v$371 = basis$0Int32$1.fromString$458(v$179);
switch (v$371[0]) { case 0: {return v$371[1];
 break; }default: {var s$372 = (("wrong type of value associated with " + x$133) + " - found number ") + v$179;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$372];
} };
 break; }default: {var s$378 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$378];
} };
 break; }default: {var s$385 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$385];
} };
} else {var s$392 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$392];
};
};
};
 break; }default: {var s$399 = ("value associated with " + x$133) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$399];
} };
 break; }default: {var s$403 = "no value associated with " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$403];
} };
};
main$0Data$1.fromJsonString$237 = function(s$240){return json$0json$1.foldlArrayJson$905(function(v$244){var v$245 = v$244[0];
var v$246 = v$244[1];
var t$626;
var t$619;
switch (v$245[0]) { case 2: {var v$435 = v$245[1];
var v$436;
var v$585 = json$0json$1.objLook$94(v$435,"cname");
switch (v$585[0]) { case 0: {var v$586 = v$585[1];
switch (v$586[0]) { case 0: {v$436 = v$586[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cname"];
} };
var v$437;
var v$591 = json$0json$1.objLook$94(v$435,"cversion");
switch (v$591[0]) { case 0: {var v$592 = v$591[1];
switch (v$592[0]) { case 0: {v$437 = v$592[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cversion is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cversion"];
} };
var v$438;
var s$441;
var v$597 = json$0json$1.objLook$94(v$435,"date");
switch (v$597[0]) { case 0: {var v$598 = v$597[1];
switch (v$598[0]) { case 0: {s$441 = v$598[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with date is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with date"];
} };
var v$442 = isodate$0isodate$1.fromString$456(basis$0String$1.extract$112(s$441,0,[0,10]));
switch (v$442[0]) { case 0: {v$438 = v$442[1];
 break; }default: {var s$443 = ("the string " + s$441) + " does not start with an iso-date";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$443];
} };
var v$447;
var v$603 = json$0json$1.objLook$94(v$435,"mach");
switch (v$603[0]) { case 0: {var v$604 = v$603[1];
switch (v$604[0]) { case 0: {v$447 = v$604[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with mach is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with mach"];
} };
var v$448;
var v$609 = json$0json$1.objLook$94(v$435,"pname");
switch (v$609[0]) { case 0: {var v$610 = v$609[1];
switch (v$610[0]) { case 0: {v$448 = v$610[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with pname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with pname"];
} };
var v$449 = lookI$127(v$435,"plen");
var v$450 = lookT$102(v$435,"ctime");
var v$451 = lookI$127(v$435,"binsz");
var v$452;
var v$453 = json$0json$1.objLook$94(v$435,"runs");
switch (v$453[0]) { case 0: {var v$454 = v$453[1];
switch (v$454[0]) { case 6: {var v$455 = v$454[1];
v$452 = (basis$0List$1.map$693(function(v$456){switch (v$456[0]) { case 2: {var v$457 = v$456[1];
var v$458 = lookI$127(v$457,"rss");
var v$459 = lookI$127(v$457,"size");
var v$460 = lookI$127(v$457,"data");
var v$461 = lookI$127(v$457,"stk");
var v$462 = lookI$127(v$457,"exe");
var v$463 = lookT$102(v$457,"sys");
var v$464 = lookT$102(v$457,"user");
return [v$460,v$462,lookT$102(v$457,"real"),v$458,v$459,v$461,v$463,v$464];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toRun expects an object"];
} };
},v$455));
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with 'runs' is not an array"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with 'runs'"];
} };
var t$625 = v$451;
var t$624 = v$436;
var t$623 = v$450;
var t$622 = v$437;
var t$621 = v$438;
var t$620;
var v$615 = json$0json$1.objLook$94(v$435,"err");
switch (v$615[0]) { case 0: {var v$616 = v$615[1];
switch (v$616[0]) { case 0: {t$620 = v$616[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with err is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with err"];
} };
t$619 = [t$625,t$624,t$623,t$622,t$621,t$620,v$447,v$449,v$448,v$452];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toLine expects an object"];
} };
t$626 = [t$619,v$246];
return t$626;
},null,s$240);
};
main$0Data$1.getUrl$247 = function(url$250){var r$251 = SmlPrims.newRequest();
js$0Js$1.openn$632(r$251,[false,"GET",url$250]);
js$0Js$1.send$650(r$251,[1]);
var v$260 = (function(r){return SmlPrims.option(r.responseText);})(r$251);
switch (v$260[0]) { case 0: {return v$260[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"no response from " + url$250];
} };
};
main$0Data$1.getReports$266 = function(v$268){var c$269;
var r$476 = SmlPrims.newRequest();
js$0Js$1.openn$632(r$476,[false,"GET","https://api.github.com/repos/melsman/mlkit-bench/contents/reports"]);
js$0Js$1.send$650(r$476,[1]);
var v$477 = (function(r){return SmlPrims.option(r.responseText);})(r$476);
switch (v$477[0]) { case 0: {c$269 = v$477[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"no response from https://api.github.com/repos/melsman/mlkit-bench/contents/reports"];
} };
return json$0json$1.foldlArrayJson$905(function(v$276){var v$277 = v$276[0];
switch (v$277[0]) { case 2: {var v$290 = v$277[1];
var v$291 = v$276[1];
var v$284 = json$0json$1.objLook$94(v$290,"download_url");
switch (v$284[0]) { case 0: {var v$286 = v$284[1];
switch (v$286[0]) { case 0: {return [v$286[1],v$291];
 break; }default: {return v$291;
} };
 break; }default: {return v$291;
} };
 break; }default: {return v$276[1];
} };
},null,c$269);
};
return 0;
})();
