if ((typeof(main$0Data$1)) == "undefined") {main$0Data$1 = {};
};
(function(){main$0Data$1.die$50 = function(s$53){throw [basis$0Initial$1.en$Fail$50,"Data: " + s$53];
};
var lookI$127 = function(obj$130,x$133){var v$140 = json$0json$1.objLook$94(obj$130,x$133);
switch (v$140[0]) { case 0: {var v$142 = v$140[1];
switch (v$142[0]) { case 3: {var v$185 = v$142[1];
var v$164 = basis$0String$1.fields$227(function(c$184){return c$184 == 46;
},v$185);
if (v$164 == null) {var s$582 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$582];
} else {var v$166 = v$164;
var v$167 = v$166[1];
if (v$167 == null) {var v$168 = v$166[0];
var v$544 = basis$0Int32$1.fromString$458(v$168);
switch (v$544[0]) { case 0: {return v$544[1];
 break; }default: {var s$545 = (("wrong type of value associated with " + x$133) + " - found number ") + v$168;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$545];
} };
} else {var v$169 = v$167;
if (v$169[1] == null) {var v$179 = v$166[0];
var v$180 = v$169[0];
var v$175 = basis$0Int32$1.fromString$458(v$180);
switch (v$175[0]) { case 0: {switch (v$175[1]) { case 0: {var v$557 = basis$0Int32$1.fromString$458(v$179);
switch (v$557[0]) { case 0: {return v$557[1];
 break; }default: {var s$558 = (("wrong type of value associated with " + x$133) + " - found number ") + v$179;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$558];
} };
 break; }default: {var s$564 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$564];
} };
 break; }default: {var s$571 = ((("Number " + v$185) + " associated with ") + x$133) + " is not an integer";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$571];
} };
} else {var s$578 = "Wrong type of number value for " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$578];
};
};
};
 break; }default: {var s$585 = ("value associated with " + x$133) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$585];
} };
 break; }default: {var s$589 = "no value associated with " + x$133;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$589];
} };
};
var lookR$186 = function(obj$189,x$192){var v$199 = json$0json$1.objLook$94(obj$189,x$192);
switch (v$199[0]) { case 0: {var v$201 = v$199[1];
switch (v$201[0]) { case 3: {var v$210 = v$201[1];
var v$207 = basis$0Real$1.fromString$493(v$210);
switch (v$207[0]) { case 0: {return v$207[1];
 break; }default: {var s$592 = (("wrong type of value associated with " + x$192) + " - found number ") + v$210;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$592];
} };
 break; }default: {var s$597 = ("value associated with " + x$192) + " is not a string";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$597];
} };
 break; }default: {var s$601 = "no value associated with " + x$192;
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$601];
} };
};
main$0Data$1.fromJsonString$262 = function(s$265){return json$0json$1.foldlArrayJson$905(function(v$269){var v$270 = v$269[0];
var v$271 = v$269[1];
var t$1024;
var t$1017;
switch (v$270[0]) { case 2: {var v$633 = v$270[1];
var v$634;
var v$927 = json$0json$1.objLook$94(v$633,"cname");
switch (v$927[0]) { case 0: {var v$928 = v$927[1];
switch (v$928[0]) { case 0: {v$634 = v$928[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cname"];
} };
var v$635;
var v$933 = json$0json$1.objLook$94(v$633,"cversion");
switch (v$933[0]) { case 0: {var v$934 = v$933[1];
switch (v$934[0]) { case 0: {v$635 = v$934[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with cversion is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with cversion"];
} };
var v$636;
var s$639;
var v$939 = json$0json$1.objLook$94(v$633,"datetime");
switch (v$939[0]) { case 0: {var v$940 = v$939[1];
switch (v$940[0]) { case 0: {s$639 = v$940[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with datetime is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with datetime"];
} };
var v$640 = isodate$0isodate$1.fromString$456(basis$0String$1.extract$112(s$639,0,[0,10]));
switch (v$640[0]) { case 0: {v$636 = v$640[1];
 break; }default: {var s$641 = ("the string " + s$639) + " does not start with an iso-date";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$641];
} };
var v$645;
var v$945 = json$0json$1.objLook$94(v$633,"mach");
switch (v$945[0]) { case 0: {var v$946 = v$945[1];
switch (v$946[0]) { case 0: {v$645 = v$946[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with mach is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with mach"];
} };
var v$646;
var v$951 = json$0json$1.objLook$94(v$633,"pname");
switch (v$951[0]) { case 0: {var v$952 = v$951[1];
switch (v$952[0]) { case 0: {v$646 = v$952[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with pname is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with pname"];
} };
var v$647 = lookI$127(v$633,"plen");
var v$648 = lookR$186(v$633,"ctime");
var v$649 = lookI$127(v$633,"binsz");
var v$650;
var v$651 = json$0json$1.objLook$94(v$633,"runs");
switch (v$651[0]) { case 0: {var v$652 = v$651[1];
switch (v$652[0]) { case 6: {var v$653 = v$652[1];
v$650 = (basis$0List$1.map$693(function(v$654){switch (v$654[0]) { case 2: {var v$655 = v$654[1];
var v$656 = lookI$127(v$655,"rss");
var v$657 = lookI$127(v$655,"size");
var v$658 = lookI$127(v$655,"data");
var v$659 = lookI$127(v$655,"stk");
var v$660 = lookI$127(v$655,"exe");
var v$661 = lookR$186(v$655,"sys");
var v$662 = lookR$186(v$655,"user");
return [v$658,v$660,lookR$186(v$655,"real"),v$656,v$657,v$659,v$661,v$662];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toRun expects an object"];
} };
},v$653));
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with 'runs' is not an array"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with 'runs'"];
} };
var t$1023 = v$649;
var t$1022 = v$634;
var t$1021 = v$648;
var t$1020 = v$635;
var t$1019 = v$636;
var t$1018;
var v$957 = json$0json$1.objLook$94(v$633,"err");
switch (v$957[0]) { case 0: {var v$958 = v$957[1];
switch (v$958[0]) { case 0: {t$1018 = v$958[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: value associated with err is not a string"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: no value associated with err"];
} };
t$1017 = [t$1023,t$1022,t$1021,t$1020,t$1019,t$1018,v$645,v$647,v$646,v$650];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: toLine expects an object"];
} };
t$1024 = [t$1017,v$271];
return t$1024;
},null,s$265);
};
main$0Data$1.getUrl$272 = function(url$275,f$278){var r$279 = SmlPrims.newRequest();
js$0Js$1.openn$632(r$279,[true,"GET",url$275]);
(function(r,f){r.onreadystatechange = f;})(r$279,function(v$285){switch ((function(r){return r.readyState;})(r$279)) { case 4: {var v$294 = (function(r){return SmlPrims.option(r.responseText);})(r$279);
switch (v$294[0]) { case 0: {var v$296 = v$294[1];
return f$278(v$296);
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"no response from " + url$275];
} };
 break; }default: {return 0;
} };
});
return js$0Js$1.send$650(r$279,[1]);
};
main$0Data$1.s$ml$300 = function(v$311,v$1014){switch (v$311[0]) { case 2: {var v$320 = v$311[1];
var v$317 = json$0json$1.objLook$94(v$320,v$1014);
switch (v$317[0]) { case 0: {return v$317[1];
 break; }default: {var s$676 = ("?> couldn't find '" + v$1014) + "' in object";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$676];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
};
main$0Data$1.s$dl$323 = function(v$335,v$336){var v$332;
switch (v$335[0]) { case 2: {var v$963 = v$335[1];
var v$965 = json$0json$1.objLook$94(v$963,v$336);
switch (v$965[0]) { case 0: {v$332 = v$965[1];
 break; }default: {var s$966 = ("?> couldn't find '" + v$336) + "' in object";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$966];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$332[0]) { case 0: {return v$332[1];
 break; }default: {var s$682 = ("$> expects string for '" + v$336) + "' in object";
throw [basis$0Initial$1.en$Fail$50,"Data: " + s$682];
} };
};
main$0Data$1.getReports$337 = function(f$340){return main$0Data$1.getUrl$272("https://api.github.com/repos/melsman/mlkit-bench/contents/reports",function(c$343){var l$344 = json$0json$1.foldlArrayJson$905(function(v$348){var v$349 = v$348[0];
var v$350 = v$348[1];
var t$1026;
var t$1025;
var v$689;
switch (v$349[0]) { case 2: {var v$969 = v$349[1];
var v$971 = json$0json$1.objLook$94(v$969,"download_url");
switch (v$971[0]) { case 0: {v$689 = v$971[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'download_url' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$689[0]) { case 0: {t$1025 = v$689[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: $> expects string for 'download_url' in object"];
} };
t$1026 = [t$1025,v$350];
return t$1026;
},null,c$343);
return f$340(l$344);
});
};
main$0Data$1.processLink$351 = function(x$354,f$357){return main$0Data$1.getUrl$272(x$354,function(s$360){return f$357(main$0Data$1.fromJsonString$262(s$360));
});
};
main$0Data$1.processLinks$361 = function(links$364,f$367){var fix$1027 = {};
fix$1027.$loop = function(xs$371,f$374){lab$loop: while (true) {if (xs$371 == null) {return f$374(null);
} else {var v$387 = xs$371;
var v$388 = v$387[0];
var v$389 = v$387[1];
var t$1038 = v$389;
var t$1039 = (function(env$1032){return function(ds$383){var v$1028 = env$1032[0];
var v$1029 = env$1032[1];
var v$1030 = env$1032[2];
var v$1031 = env$1032[3];
return v$1031(v$1030,(function(env$1037){return function(s$696){var v$1033 = env$1037[0];
var v$1034 = env$1037[1];
var v$1035 = env$1037[2];
var v$1036 = env$1037[3];
var d$973 = v$1036(s$696);
return v$1035([[v$1034,d$973],v$1033]);
};
})([ds$383,v$1030,v$1028,v$1029]));
};
})([f$374,main$0Data$1.fromJsonString$262,v$388,main$0Data$1.getUrl$272]);
var xs$371 = t$1038;
var f$374 = t$1039;
continue lab$loop;
};
};
};
var loop$368 = fix$1027.$loop;
return loop$368(links$364,f$367);
};
main$0Data$1.getTagDate$390 = function(url$393,f$396){return main$0Data$1.getUrl$272(url$393,function(c$399){var j$400 = json$0json$1.fromString$849(c$399);
var d$416;
switch (j$400[0]) { case 2: {var v$445 = j$400[1];
var v$428 = json$0json$1.objLook$94(v$445,"author");
switch (v$428[0]) { case 0: {var v$430 = v$428[1];
switch (v$430[0]) { case 2: {var v$432 = v$430[1];
var v$719 = json$0json$1.objLook$94(v$432,"date");
switch (v$719[0]) { case 0: {var v$720 = v$719[1];
switch (v$720[0]) { case 0: {d$416 = v$720[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {var v$975 = json$0json$1.objLook$94(v$445,"tagger");
switch (v$975[0]) { case 0: {var v$976 = v$975[1];
switch (v$976[0]) { case 2: {var v$977 = v$976[1];
var v$978 = json$0json$1.objLook$94(v$977,"date");
switch (v$978[0]) { case 0: {var v$979 = v$978[1];
switch (v$979[0]) { case 0: {d$416 = v$979[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
} };
 break; }default: {var v$981 = json$0json$1.objLook$94(v$445,"tagger");
switch (v$981[0]) { case 0: {var v$982 = v$981[1];
switch (v$982[0]) { case 2: {var v$983 = v$982[1];
var v$984 = json$0json$1.objLook$94(v$983,"date");
switch (v$984[0]) { case 0: {var v$985 = v$984[1];
switch (v$985[0]) { case 0: {d$416 = v$985[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no date object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.no tagger or author object"];
} };
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getTagDate.expecting object"];
} };
return f$396(d$416);
});
};
main$0Data$1.getMLKitTags$446 = function(f$449){return main$0Data$1.getUrl$272("https://api.github.com/repos/melsman/mlkit/git/refs/tags",function(c$452){var l$453 = json$0json$1.foldlArrayJson$905(function(v$457){var v$489 = v$457[0];
var v$490 = v$457[1];
var reference$458;
var v$728;
switch (v$489[0]) { case 2: {var v$988 = v$489[1];
var v$990 = json$0json$1.objLook$94(v$988,"ref");
switch (v$990[0]) { case 0: {v$728 = v$990[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'ref' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$728[0]) { case 0: {reference$458 = v$728[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: $> expects string for 'ref' in object"];
} };
var tag$459;
var v$469 = basis$0String$1.tokens$220(function(c$485){return c$485 == 47;
},reference$458);
if (v$469 == null) {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} else {var v$471 = v$469;
switch (v$471[0]) { case "refs": {var v$473 = v$471[1];
if (v$473 == null) {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} else {var v$475 = v$473;
switch (v$475[0]) { case "tags": {var v$477 = v$475[1];
if (v$477 == null) {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} else {var v$479 = v$477;
if (v$479[1] == null) {tag$459 = v$479[0];
} else {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
};
};
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} };
};
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: getMLKitTags.wrong format in ref"];
} };
};
var url$486;
var v$917;
switch (v$489[0]) { case 2: {var v$994 = v$489[1];
var v$996 = json$0json$1.objLook$94(v$994,"object");
switch (v$996[0]) { case 0: {v$917 = v$996[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'object' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
var v$756;
switch (v$917[0]) { case 2: {var v$1000 = v$917[1];
var v$1002 = json$0json$1.objLook$94(v$1000,"url");
switch (v$1002[0]) { case 0: {v$756 = v$1002[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> couldn't find 'url' in object"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: ?> expects left argument to be an object"];
} };
switch (v$756[0]) { case 0: {url$486 = v$756[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$50,"Data: $> expects string for 'url' in object"];
} };
return [[function(v$1016){return main$0Data$1.getTagDate$390(url$486,v$1016);
},tag$459],v$490];
},null,c$452);
return f$449(l$453);
});
};
return 0;
})();
